#!/usr/bin/python3
import os
import subprocess
import json
import time
import requests
import traceback
import re
import subprocess


pattern_wifi = r'Link Quality=(\d+)/\d+.*Signal level=(-\d+)\sdBm'

def get_wifi_signal():
    input_string = subprocess.check_output(["iwconfig", "wlan0"]).decode("utf-8")
    matches = re.search(pattern_wifi, input_string)
    if matches:
        link = matches.group(1)
        level = matches.group(2)
        return link, level
    else:
        return "00", "00" 

def run_device_command(cmd):
    cmd = cmd.strip().split()
    result = subprocess.run(cmd, capture_output=True, text=True)
    return result.stdout if result.returncode == 0 else result.stderr

json_file = "/root/cfg.json"
data_cfg = None
cfg_url = f"""http://127.0.0.1:8080/cfg"""

def load_cfg():
    try:
        res = requests.get(url=cfg_url)
        return res.json()
    except:
        with open(json_file) as file:
            data_cfg = json.load(file)
        return data_cfg

with open(json_file) as file:
    data_cfg = json.load(file)

desktop_url = f"""http://{data_cfg['host']}:{data_cfg['port']}/device_register"""
alive_flag = True


while True:
    out = run_device_command(f'iwgetid')
    data_cfg = load_cfg()
    if data_cfg['ssid'] not in out:
        alive_flag = False
        if os.path.exists('/etc/wifi_connected'):
            print("Disconnected")
            os.remove('/etc/wifi_connected')
        ssid = data_cfg['ssid']
        password = data_cfg['password']
        print(f"Connect with wifi {ssid}")
        command = f'nmcli d wifi connect "{ssid}" password "{password}"'
        os.system(command)
        time.sleep(1)
    else:
        if alive_flag is False:
            print('Reconnected')
            # os.system('systemctl restart usb-manager')
            alive_flag = True
        os.system('touch /etc/wifi_connected')
        try:
            print("Ping to server")
            link_qa, signal = get_wifi_signal()
            response = requests.post(desktop_url, json={'device_id': data_cfg['device_id'], 'wifi_quality': link_qa, 'wifi_signal': signal}, timeout=3)
            print(f"Ping to server: {response.status_code}")
            # if response.status_code == 200:
            #     time.sleep(1)
            # else:
            time.sleep(1)
        except:
            traceback.print_exc()
            pass
