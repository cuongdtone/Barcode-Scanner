#!/usr/bin/python3

import json
import time
import base64
import os
import shutil
from flask import Flask, request, jsonify, send_file
from pathlib import Path
from queue import Queue
from threading import Thread
import requests

work_dir = '/data'
media_dir = f'{work_dir}/media'
os.makedirs(media_dir, exist_ok=True)
usb_backingfile = os.path.join(work_dir, 'usb_partition.img')

json_file = "/root/cfg.json"

with open(json_file) as file:
    data_cfg = json.load(file)

def dump_cfg():
    global data_cfg
    with open(json_file, 'w') as file:
        json.dump(data_cfg, file)
        file.flush()
        os.fsync(file.fileno()) 

def dump_cfg_data(data):
    with open(json_file, 'w') as file:
        json.dump(data, file)
        file.flush()
        os.fsync(file.fileno()) 

def log(msg):
    try:
        logger_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/logger'
        response = requests.post(logger_url, json={'msg': msg})
    except:
        pass

def clean_file():
    log(f"USB File: start clean -> {data_cfg['device_id']}")

    try: #todo: convert to subproccess for system call
        os.system('modprobe g_mass_storage -r')
        os.system(f'mount {usb_backingfile} /mnt/')
        os.system(f'rm -rf /mnt/*')
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
    except:
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
    log(f"Clean USB")

def repair_usb():
    try: #todo: convert to subproccess for system call
        os.system('rm -rf /data')
        log(f"Repair USB at {data_cfg['device_id']}")
    except:
        pass


def move_file_to_usb(fpath):
    log(f"USB File: start [{fpath}] -> {data_cfg['device_id']}")
    try: #todo: convert to subproccess for system call
        os.system('modprobe g_mass_storage -r')
        os.system(f'mount {usb_backingfile} /mnt/')
        os.system(f'rm -rf /mnt/*')
        os.system(f'mkdir /mnt/data')
        dest_path = os.path.join('/mnt/data', os.path.basename(fpath))
        shutil.copy2(fpath, dest_path)
        os.remove(fpath)
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        log(f"USB File: Move file {fpath} to USB")
    except:
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        log(f"USB File: Move file failed: {fpath}")


class USBSingle:
    def __init__(self) -> None:
        self.fpath_queue = Queue(maxsize=1000)
        self.clean = 0
        self.repair = 0
        Thread(target=self.task).start()

    def task(self):
        while True:
            try:
                while not self.fpath_queue.empty():
                    fpath = self.fpath_queue.get()
                    move_file_to_usb(fpath)
                    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_file_event'
                    try:
                        requests.post(url=usb_url, json={'fname': os.path.basename(fpath)})
                    except:
                        pass
                if self.clean:
                    self.clean = 0
                    clean_file()
                    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_clean'
                    try:
                        requests.post(url=usb_url)
                    except:
                        pass
                if self.repair:
                    self.repair = 0
                    repair_usb()
                    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_clean'
                    try:
                        requests.post(url=usb_url)
                    except:
                        pass
                    os.system('reboot -f')
            except:
                print("Usb-server: error")
            time.sleep(0.3)        

    def add_file(self, fpath):
        self.fpath_queue.put(fpath)

app = Flask(__name__)

usb_manager = USBSingle()

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return 'No file part in the request'

    file = request.files['file']

    if file.filename == '':
        return 'No selected file'
    save_path = f'{media_dir}/{file.filename}'
    file.save(save_path)
    usb_manager.add_file(save_path)
    return 'File uploaded successfully'

@app.route('/clean', methods=['GET'])
def clean():
    usb_manager.clean = 1
    return 'File uploaded successfully'


@app.route('/repair', methods=['GET'])
def repair():
    usb_manager.repair = 1
    return 'File uploaded successfully'

@app.route('/addfile', methods=['POST'])
def add_file():
    data = request.get_json()
    fpath = data['fpath']
    usb_manager.add_file(fpath)
    return "200"

@app.route('/alive', methods=['GET'])
def alive():
    return jsonify({'status': 'alive'})

@app.route('/change_name', methods=['POST'])
def change_name():
    global data_cfg
    data = request.get_json()
    name = data['name']
    data_cfg['device_id'] = name
    dump_cfg_data(data_cfg)
    return jsonify({'status': 'True'})


@app.route('/cfg', methods=['GET'])
def cfg():
    global data_cfg
    return jsonify(data_cfg)

@app.route('/change_wifi', methods=['POST'])
def change_wifi():
    global data_cfg
    data = request.get_json()
    ssid = data['ssid']
    password = data['password']
    host = data['host']
    port = data['port']

    if ssid:
        data_cfg['ssid'] = ssid
        data_cfg['password'] = password
    if host:
        data_cfg['host'] = host
        data_cfg['port'] = port

    dump_cfg()
    return jsonify({'status': 'True'})


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)
