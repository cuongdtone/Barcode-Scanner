#!/usr/bin/python3

import json
import time
import base64
import os
import shutil
from flask import Flask, request, jsonify, send_file
from pathlib import Path
from queue import Queue
from threading import Thread
import requests
from concurrent.futures import ThreadPoolExecutor
######################################### logger ###
import traceback
import logging
from logging.handlers import RotatingFileHandler
from logging import Formatter
#########################
logger = logging.getLogger('RotatingFileHandler')
logger.setLevel(logging.DEBUG)


os.makedirs(f'/log/usb-manager', exist_ok=True)

handler = RotatingFileHandler(f'/log/usb-manager/server.log', maxBytes=10000000, backupCount=100)
formatter = Formatter('%(asctime)s - %(levelname)s - [PID:%(process)d]  - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.info('Start')
####################################################

work_dir = '/data'
media_dir = f'{work_dir}/media'
os.makedirs(media_dir, exist_ok=True)
usb_backingfile = os.path.join(work_dir, 'usb_partition.img')

json_file = "/root/cfg.json"

with open(json_file) as file:
    data_cfg = json.load(file)

logger.info(f'Initial config: {str(data_cfg)}')

def dump_cfg():
    global data_cfg
    with open(json_file, 'w') as file:
        json.dump(data_cfg, file)
        file.flush()
        os.fsync(file.fileno()) 

def dump_cfg_data(data):
    with open(json_file, 'w') as file:
        json.dump(data, file)
        file.flush()
        os.fsync(file.fileno()) 

def log(msg):
    try:
        logger.info(msg)
        logger_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/logger'
        response = requests.post(logger_url, json={'msg': msg})
    except:
        logger.error("Logger error: %s\n%s", msg, traceback.format_exc())
        pass

def clean_file():
    log(f"USB File: start clean -> {data_cfg['device_id']}")

    try: #todo: convert to subproccess for system call
        os.system('modprobe g_mass_storage -r')
        os.system(f'mount {usb_backingfile} /mnt/')
        os.system(f'rm -rf /mnt/*')
        os.system(f'umount /mnt/')
        logger.debug('Cleaned image. Recreating USB gadget ..')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        logger.info('Recreated USB gadget')
    except:
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        logger.error('Clean failed and reconnected USB gadget')
        logger.error("Clean_file traceback:\n%s", traceback.format_exc())
    log(f"Cleaned USB")

def repair_usb():
    try: #todo: convert to subproccess for system call
        os.system('rm -rf /data')
        log(f"Repair USB at {data_cfg['device_id']}")
    except:
        logger.error("repair_usb error: \n%s", traceback.format_exc())
        pass


def move_file_to_usb(fpath):
    log(f"USB File: start [{fpath}] -> {data_cfg['device_id']}")
    try: #todo: convert to subproccess for system call
        os.system('modprobe g_mass_storage -r')
        os.system(f'mount {usb_backingfile} /mnt/')
        os.system(f'rm -rf /mnt/*')
        os.system(f'mkdir /mnt/data')
        dest_path = os.path.join('/mnt/data', os.path.basename(fpath))
        logger.debug(f'Moving file with dest_path={dest_path}')
        shutil.copy2(fpath, dest_path)
        os.remove(fpath)
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        log(f"USB File: Move file {fpath} to USB")
    except:
        os.system(f'umount /mnt/')
        time.sleep(6)
        os.system(f'modprobe g_mass_storage file={usb_backingfile} stall=0 removable=1')
        logger.error("move_file_to_usb error: \n%s", traceback.format_exc())
        log(f"USB File: Move file failed: {fpath}")

def usb_file_event_task(fpath):
    logger.info(f'usb_file_event_task Fpath: {fpath}')
    move_file_to_usb(fpath)
    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_file_event'
    logger.info(f'Sending signal to server: {usb_url}')
    try:
        res = requests.post(url=usb_url, json={'fname': os.path.basename(fpath)})
        if res.status_code != 200:
            logger.error(f'Sent usb_file_event failed to server: status code={res.status_code}')
        else:
            logger.info(f'Sent to server: {usb_url}')
    except:
        logger.error("Sent usb_file_event failed to server: \n%s", traceback.format_exc())

def usb_clean_task():
    logger.info('Clean USB start')
    clean_file()
    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_clean'
    logger.info(f'Sending info to server: {usb_url}')
    try:
        res = requests.post(url=usb_url)
        if res.status_code != 200:
            logger.error(f'Sent usb_clean failed to server: status code={res.status_code}')
    except:
        logger.error("Sent usb_clean failed to server: \n%s", traceback.format_exc())
        pass


def usb_repair_task():
    logger.info('Repair USB start')
    repair_usb()
    usb_url = f'http://{data_cfg["host"]}:{data_cfg["port"]}/usb_clean'
    logger.info(f'Sending repair info to server: {usb_url}')
    try:
        res = requests.post(url=usb_url)
        if res.status_code != 200:
            logger.error(f'Sent repair repair in  failed to server: status code={res.status_code}')
        else:
            logger.error(f'Sent repair in usb_clean to server: status code={res.status_code}')
    except:
        logger.error("Sent repair failed to server: \n%s", traceback.format_exc())
    logger.info("Reboot pi")
    os.system('reboot -f')

app = Flask(__name__)
executor = ThreadPoolExecutor(1)

def check_worker_availability():
    if executor._idle_semaphore.acquire(timeout=0):
        executor._idle_semaphore.release()
        return True
    else:
        return False

def add_task(task_type):
    if len(executor._work_queue) == executor._max_workers:
        pass
    else:
        pass

# usb_manager = USBSingle()

@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        logger.info(f"Upload route: start")

        if 'file' not in request.files:
            logger.warning(f"Upload route: No file part in the request")
            return 'No file part in the request'

        file = request.files['file']

        if file.filename == '':
            logger.warning(f"Upload route: No selected file")
            return 'No selected file'
        save_path = f'{media_dir}/{file.filename}'
        logger.info(f"Upload route: save_path={save_path}")

        file.save(save_path)
        if check_worker_availability():
            executor.submit(usb_file_event_task, save_path)
        else:
            log(f"USB busy")
        return 'File uploaded successfully'
    except:
        logger.error("Upload route: error: \n%s", traceback.format_exc())
        return 'failed'


@app.route('/clean', methods=['GET'])
def clean():
    try:
        logger.info(f"Clean route: start clean")
        if check_worker_availability():
            executor.submit(usb_clean_task)
        else:
            log(f"USB busy")
        return 'File uploaded successfully'
    except:
        logger.error("Clean route: error: \n%s", traceback.format_exc())
        return 'failed'

@app.route('/clean_wait', methods=['GET'])
def clean_wait():
    try:
        logger.info(f"Clean_wait route: start clean")
        if check_worker_availability():
            future = executor.submit(usb_clean_task)
            result = future.result()
        else:
            log(f"USB busy")
        return 'File uploaded successfully'
    except:
        logger.error("Clean_wait route: error: \n%s", traceback.format_exc())
        return 'failed'

@app.route('/repair', methods=['GET'])
def repair():
    try:
        logger.info(f"Repair route: start repair")
        if check_worker_availability():
            executor.submit(usb_repair_task)
        else:
            log(f"USB busy")
        return 'File uploaded successfully'
    except:
        logger.error("Repair route: error: \n%s", traceback.format_exc())
        return 'failed'

# @app.route('/addfile', methods=['POST'])
# def add_file():
#     try:
#         logger.info(f"Addfile route: start addfile")
#         data = request.get_json()
#         logger.info(f"Addfile data {data}")
#         fpath = data['fpath']
#         usb_manager.add_file(fpath)
#         return "200"
#     except:
#         logger.error("Addfile route: error: \n%s", traceback.format_exc())
#         return 'failed'


@app.route('/alive', methods=['GET'])
def alive():
    return jsonify({'status': 'alive'})

@app.route('/change_name', methods=['POST'])
def change_name():
    global data_cfg
    try:
        logger.info(f"Change_name route: start change_name")
        data = request.get_json()
        logger.info(f"Change_name route: data {data}")
        name = data['name']
        data_cfg['device_id'] = name
        dump_cfg_data(data_cfg)
        return jsonify({'status': 'True'})
    except:
        logger.error("Change_name route: error: \n%s", traceback.format_exc())
        return 'failed'


@app.route('/cfg', methods=['GET'])
def cfg():
    global data_cfg
    # logger.info(f"cfg route: {data_cfg}")
    return jsonify(data_cfg)

@app.route('/change_wifi', methods=['POST'])
def change_wifi():
    global data_cfg
    try:
        data = request.get_json()

        logger.info(f"Change_wifi route: data {data}")
        ssid = data['ssid']
        password = data['password']
        host = data['host']
        port = data['port']

        if ssid:
            data_cfg['ssid'] = ssid
            data_cfg['password'] = password
        if host:
            data_cfg['host'] = host
            data_cfg['port'] = port

        dump_cfg()
        os.system('reboot -f')
        return jsonify({'status': 'True'})
    except:
        logger.error("Change_wifi route: error: \n%s", traceback.format_exc())
        return 'failed'

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)
